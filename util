#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
MAGENTA='\033[0;35m'  # Added for spinner
CHECKMARK='\033[32m✓\033[0m'  # Added for success checkmark
CROSS='\033[31m𐄂\033[0m'  # Added for failure cross

# Function: show_loading
# Description: Displays a loading spinner with a custom message while a process is running
# Parameters:
#   $1: Description message to display
#   $2: Process ID to monitor
function show_loading() {
  local description=$1
  local process_id=$2
  local spinner_index=0
  local braille_spinner_list='⡿⣟⣯⣷⣾⣽⣻⢿'

  echo -n "$description"

  # Continue spinning while the process is running
  while ps -p "$process_id" >/dev/null; do
    printf "\b${MAGENTA}%s${NC}" "${braille_spinner_list:spinner_index:1}"
    spinner_index=$(( (spinner_index + 1) % ${#braille_spinner_list} ))
    sleep 0.025
  done

  # Display success or failure icon based on the process exit status
  if wait $process_id; then  # Changed: Using wait $process_id instead of [ $? -eq 0 ]
    echo -e "\b${CHECKMARK} "
  else
    echo -e "\b${CROSS} "
  fi
}

# Function to display APK size
function display_apk_size() {
  local apk_path="build/app/outputs/flutter-apk/app-release.apk"
  
  if [ -f "$apk_path" ]; then
    # Get size in bytes
    local size_bytes=$(wc -c < "$apk_path")
    # Convert to megabytes (with 2 decimal places)
    local size_mb=$(echo "scale=2; $size_bytes / 1048576" | bc)
    
    echo -e "${BLUE}APK Size: ${size_mb} MB${NC}"
  else
    echo -e "${RED}APK file not found at $apk_path${NC}"
  fi
}

# Main script logic
if [ "$1" == "apk" ]; then
  echo -e "${YELLOW}Building APK (Full Process)...${NC}\n"
  
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build apk --release --obfuscate --target-platform android-arm64 --split-debug-info=./ >/dev/null 2>&1) &
  PID=$!
  show_loading "Building APK...                                      " $PID

  echo -e "\n${GREEN}✓ APK built successfully!${NC}"
  
  # Display APK size
  display_apk_size
  
  # Open the APK directory
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/flutter-apk/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/flutter-apk/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/flutter-apk/"
  fi

elif [ "$1" == "aab" ]; then
  echo -e "${YELLOW}Building AAB...${NC}\n"
  
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build appbundle --release --obfuscate --split-debug-info=./ >/dev/null 2>&1) &
  PID=$!
  show_loading "Building AAB...                                      " $PID
  
  echo -e "\n${GREEN}✓ AAB built successfully!${NC}"
  
  # Open the directory containing the AAB
  if [[ "$OSTYPE" == "darwin"* ]]; then
    open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open build/app/outputs/bundle/release/
  elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    start build/app/outputs/bundle/release/
  else
    echo "Cannot open directory automatically. Please check: build/app/outputs/bundle/release/"
  fi

elif [ "$1" == "lang" ]; then
  # Run flutter gen-l10n to generate localization files
  (flutter gen-l10n >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating localizations                              " $PID
  
  echo -e "\n${CHECKMARK}  Localizations generated successfully."

elif [ "$1" == "db" ]; then
  echo -e "${YELLOW}Executing build_runner...${NC}  \n"
  # Run build_runner to generate Dart code
  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Running build_runner     " $PID

elif [ "$1" == "setup" ]; then
  echo -e "${YELLOW}Performing full setup...${NC}  \n"

  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                  " $PID

  (flutter pub upgrade >/dev/null 2>&1) &
  PID=$!
  show_loading "Upgrading dependencies...                            " $PID

  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Running build_runner...                              " $PID

  (flutter gen-l10n >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating localizations...                          " $PID

  (flutter pub upgrade >/dev/null 2>&1) &
  PID=$!
  show_loading "Refreshing dependencies...                           " $PID

  (flutter analyze >/dev/null 2>&1) &
  PID=$!
  show_loading "Analyzing code...                                    " $PID

  (dart format . >/dev/null 2>&1) &
  PID=$!
  show_loading "Formatting code...                                   " $PID

  echo -e "\n ${GREEN}✓  Full setup completed successfully.  ${NC}"

elif [ "$1" == "cache-repair" ]; then
  echo -e "${YELLOW}Repairing pub cache...${NC}\n"
  
  (flutter pub cache repair >/dev/null 2>&1) &
  PID=$!
  show_loading "Repairing pub cache...                               " $PID
  
  echo -e "\n ${GREEN}✓  Pub cache repaired successfully.  ${NC}"

elif [ "$1" == "cleanup" ]; then
  echo -e "${YELLOW}Cleaning up project...${NC}\n"
  
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID
  
  echo -e "\n${GREEN}✓ Project cleaned successfully!${NC}"

elif [ "$1" == "release-run" ]; then
  echo -e "${YELLOW}Building & Installing Release APK...${NC}\n"
  
  (flutter clean >/dev/null 2>&1) &
  PID=$!
  show_loading "Cleaning project...                                   " $PID

  (flutter pub get >/dev/null 2>&1) &
  PID=$!
  show_loading "Getting dependencies...                              " $PID

  (dart run build_runner build --delete-conflicting-outputs >/dev/null 2>&1) &
  PID=$!
  show_loading "Generating build files...                            " $PID

  (flutter build apk --release --obfuscate --target-platform android-arm64 --split-debug-info=./ >/dev/null 2>&1) &
  PID=$!
  show_loading "Building APK...                                      " $PID

  # Display APK size after building
  display_apk_size

  (flutter install --release >/dev/null 2>&1) &
  PID=$!
  show_loading "Installing on device...                              " $PID

  echo -e "\n${GREEN}✓ APK built and installed successfully!${NC}"

else
  echo -e "${YELLOW}Usage: $0 [command]${NC}"
  echo -e "\nAvailable commands:"
  echo -e "  apk          Build release APK (Full Process)"
  echo -e "  aab          Build release AAB"
  echo -e "  lang         Generate localization files"
  echo -e "  db           Run build_runner"
  echo -e "  setup        Perform full project setup"
  echo -e "  cache-repair Repair pub cache"
  echo -e "  cleanup      Clean project and get dependencies"
  echo -e "  release-run  Build & install release APK on connected device"
  exit 1
fi